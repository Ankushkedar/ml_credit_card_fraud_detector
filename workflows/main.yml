name: CI/CD Workflow
on:
  push:
    branches:
      - main # or your default branch like 'master'
      - develop # Add other branches you want to trigger on

jobs:
  # Optional Test Stage
  test:
    runs-on: ubuntu-latest
    # This job will only run if the 'perform-test' input is true, or if it's not explicitly set to false
    # You can trigger this manually with 'workflow_dispatch' and set the input
    # For pushes, it will always run unless you add conditional logic based on commit messages or file changes
    # For now, it will always run on push if it's the first job
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Or your desired Node.js version

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

  # Build Stage
  build:
    runs-on: ubuntu-latest
    needs: test # This ensures build only runs after test completes successfully (if test is enabled)
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18' # Or your desired Node.js version

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build # Assuming you have a 'build' script in your package.json

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: my-project-build
        path: |
          ./dist # Adjust this to your build output directory
          ./build # Common alternative

  # Deploy Stage (GitHub-limited)
  deploy:
    runs-on: ubuntu-latest
    needs: build # This ensures deploy only runs after build completes successfully
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: my-project-build
        path: ./build-output # This will download to a directory named 'build-output'

    # Example 1: Creating a GitHub Release with build artifacts
    # This step will create a new release on GitHub.
    # You'll need to configure a GITHUB_TOKEN with appropriate permissions (usually 'contents: write').
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically provided
      with:
        tag_name: v${{ github.run_number }} # Example tag: v1, v2, etc.
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build-output/your-build-file.zip # Replace with your actual build file/archive
        asset_name: your-build-file-${{ github.run_number }}.zip # Name of the asset in the release
        asset_content_type: application/zip # Adjust content type based on your file

    # Example 2 (Alternative/Additional): Deploying to GitHub Pages
    # If your "deploy" is serving static content via GitHub Pages
    # - name: Deploy to GitHub Pages
    #   uses: peaceiris/actions-gh-pages@v3
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_dir: ./build-output # Directory containing your built static files
    #     # If you want to use a custom branch for gh-pages, e.g., 'docs'
    #     # publish_branch: gh-pages # Default is gh-pages
